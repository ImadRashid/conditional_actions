## Name of the CI/CD Pipeline displayed while execution
name: CI CD Pipeline for Distribution to Developers & Internal Team/Testers

## This is the trigger which will initiate our workflow


## We are initializing workflow whenever we push new code to any feature branch that contains:
## "v" e.g. v1.0.0, v0.0.1, etc.
on:
  push:
    branches:
      - 'v*'
  workflow_dispatch:

## These are the environment variable we need for application signing,
## Environment Variables should not be exposed hence they are saved as github Secrets
env:
  KEY_JKS: ${{ secrets.KEY_JKS }}
  KEY_PASSWORD: ${{ secrets.ALIAS_PASSWORD }}
  ALIAS_PASSWORD: ${{ secrets.KEY_PASSWORD }}

## This is a job in our workflow, the name of job is "build-deploy"
jobs:
  build-deploy:
## This is the OS on which we would like to run our job, 
## we can choose windows, macOS or Linux based on personal taste
    runs-on: ubuntu-latest
    steps:
## Cloning into GitHub repo of source-cde
##
      - uses: actions/checkout@v3

## Downloading JAVA Binaries & setting up Java Environment
      - uses: actions/setup-java@v2
        with:
          distribution: "zulu"
          java-version: "12.x" ## Use any JAVA version

## Adding google-services.json, firebase_options.dart files to our project, 
## Only needed if you have firebase integrated, incase of AWS etc Env variables can be considered its alternate
## remember we cannot push such files into source repositories due to security concerns,
## 
      - name: Decode google-services.json
        env: 
            GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
        run: echo "$GOOGLE_SERVICES_JSON" > android/app/google-services.json
      - name: Decode firebase_option
        env:
          firebase_options_dart: ${{secrets.FIREBASE_OPTION}}
        run: echo "$firebase_options_dart" > lib/firebase_options.dart

## Adding Keystore file via Github Secrets
## We cannot add keystores in GitHub repos for security concerns

# Decoding base64 key into a file
      - name: Decode Base64 key
        run: echo "${{ secrets.KEYSTORE2 }}" | base64 --decode > android/upload-keystore.jks
# Making Key Properties file
      - name: Make Key Properties File
        run: echo "${{ secrets.KEY_PROPERTIES }}" > android/key.properties

## Configuring the flutter environment
## 
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.3.4"
          channel: "stable"
##
##
## Fetching flutter dependencies and building a release apk file
##
##
      - run: flutter pub get
      - run: flutter build apk --release
##
##
## Checking the latest commit message for following keywords:
## "dev-release" == to ditribute the apk file to developers only
## "internal-release" == to distribute the apk file to internal developers
## Otherwise only upload the artifact as a result of this action run
##
##
      - if: contains(github.event.head_commit.message, 'dev-release')
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
            appId: ${{secrets.APP_ID}}
            # token: ${{secrets.TOKEN}}
            serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
            groups: developer-group
            file: build/app/outputs/flutter-apk/app-release.apk
      - if: contains(github.event.head_commit.message, 'internal-release')
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
            appId: ${{secrets.APP_ID}}
            # token: ${{secrets.TOKEN}}
            serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
            groups: internal-group, developer-group
            file: build/app/outputs/flutter-apk/app-release.apk
##
##
## We are uploading the generated artifact so it is accessible to us anytime when we comeback to a specific Action which was run
## This step is important because if in future we need to see a past version of app, we won't need to revert code and re-compile again
##
##
      - uses: actions/upload-artifact@v2
        with:
          name: release-apk
          path: build/app/outputs/apk/release/app-release.apk
